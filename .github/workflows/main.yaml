##
## This workflow handles testing of pull requests and pushes.
## It also publishes some packages to any new Erlang/OTP release
##
## To speed this up it would be nice if one could share docker
## images inbetween different jobs, but at the moment this is
## not possible so we need to rebuild all of Erlang/OTP multiple
## times.
##
## Also once the windows runner supports WSL we should implement
## support for building Erlang/OTP here.
##
## When ghcr.io support using the GITHUB_TOKEN we should migrate
## over to use it instead as that should allow us to use the
## built-in caching mechanisms of docker/build-push-action@v2.
## However as things are now we use docker directly to make things
## work.
##

name: Build and check Erlang/OTP

on:
  push:
  pull_request:

jobs:
  pack:
    name: Pack the Erlang/OTP tar.gz
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Commit autoconf files
        ## We first commit the autoconf generate so that they
        ## are kept in the pre-built achive
        run: |
          ./otp_build autoconf
          find . -name aclocal.m4 | xargs git add -f
          find . -name configure | xargs git add -f
          find . -name config.h.in | xargs git add -f
          find . -name config.guess | xargs git add -f
          find . -name config.sub | xargs git add -f
          find . -name install-sh | xargs git add -f
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git commit --no-verify -m 'Add generated configure files'
      - name: Archive git repository
        run: git archive --prefix otp/ -o otp_src.tar.gz HEAD
      - name: Upload source tar archive
        uses: actions/upload-artifact@v2
        with:
          name: otp_git_archive
          path: otp_src.tar.gz

  test:
    name: Test Erlang/OTP
    runs-on: ubuntu-latest
    needs: pack
    steps:
      - uses: actions/checkout@v2
      - name: Download source archive
        uses: actions/download-artifact@v2
        with:
          name: otp_git_archive
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build base image
        run: |
          GHCR=$(echo "ghcr.io/${{ github.repository }}" | tr 'A-Z' 'a-z')
          docker build \
            --pull \
            --cache-from  "$GHCR/base:ubuntu20.04" \
            --tag base \
            --file ".github/dockerfiles/Dockerfile.debian-base" \
            --build-arg "BASE=ubuntu:20.04" .
      - name: Build image
        run: |
          GHCR=$(echo "ghcr.io/${{ github.repository }}" | tr 'A-Z' 'a-z')
          docker build --tag otp \
            --build-arg "BASE=base" \
            --build-arg ARCHIVE=otp_src.tar.gz \
            --file ".github/dockerfiles/Dockerfile" .
        ## Smoke build tests
      - name: Run smoke test
        run: docker run -i -v $PWD/scripts:/scripts otp sh -c "cd /tests && /scripts/run-smoke-tests"
        ## Run dialyzer
        ## - name: Run dialyzer
        ##   run: docker run -i -v $PWD/scripts:/scripts otp sh -c "/scripts/run-dialyzer"


  build:
    name: Build Erlang/OTP
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test

    strategy:
      fail-fast: false
      matrix:
        image:
          - ubuntu20.04
          - ubuntu18.04
          - ubuntu16.04
          - debian10
          - debian9
          - raspbian10
          - raspbian9
          - centos8
          - centos7
          - centos6
          - alpine3.13
          - alpine3.12

    steps:
      - uses: actions/checkout@v2
      - name: Download source archive
        uses: actions/download-artifact@v2
        with:
          name: otp_git_archive
      - name: prepare docker
        run: |
          mkdir -p $HOME/.docker
          echo '{ "experimental": "enabled" }' | tee $HOME/.docker/config.json
          echo '{ "experimental": true, "storage-driver": "overlay2", "max-concurrent-downloads": 50, "max-concurrent-uploads": 50, "graph": "/mnt/docker" }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          docker version
          docker buildx create --use --name mybuild
          docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Set env
        run: |
          cat <<-EOF >> "$GITHUB_ENV"
          GHCR=$(echo "ghcr.io/${{ github.repository }}" | tr 'A-Z' 'a-z')
          TAG=${GITHUB_REF#refs/tags/}
          VSN=${TAG#OTP-}
          IMAGE=$GHCR:$VSN-${{ matrix.image }}
          EOF
          case ${{ matrix.image }}  in
            alpine*)
              echo 'PLATFORM=linux/amd64,linux/arm64' >> $GITHUB_ENV
            ;;
            centos6)
              sed -i '3a COPY .github/dockerfiles/CentOS6-Base.repo /etc/yum.repos.d/CentOS-Base.repo' .github/dockerfiles/Dockerfile.centos-base
              echo 'PLATFORM=linux/amd64' >> $GITHUB_ENV
            ;;
            centos*)
              echo 'PLATFORM=linux/amd64,linux/arm64' >> $GITHUB_ENV
            ;;
            raspbian*)
              echo 'PLATFORM=linux/arm64' >> $GITHUB_ENV
            ;;
            ubuntu16.04)
              sed -i 's/libssl1.1/libssl1.0.0/g' .github/dockerfiles/Dockerfile.debian-base
              echo 'PLATFORM=linux/amd64,linux/arm64' >> $GITHUB_ENV
            ;;
            *)
              echo 'PLATFORM=linux/amd64,linux/arm64' >> $GITHUB_ENV
            ;;
          esac
      - name: Build ${{ matrix.image }} image
        run: |
          docker buildx build --platform "$PLATFORM" \
            --tag "$IMAGE" \
            --file ".github/dockerfiles/Dockerfile" \
            --build-arg "BASE=$GHCR/base:${{ matrix.image }}" . \
            --push
