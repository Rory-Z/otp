##
## This workflow handles testing of pull requests and pushes.
## It also publishes some packages to any new Erlang/OTP release
##
## To speed this up it would be nice if one could share docker
## images inbetween different jobs, but at the moment this is
## not possible so we need to rebuild all of Erlang/OTP multiple
## times.
##
## Also once the windows runner supports WSL we should implement
## support for building Erlang/OTP here.
##
## When ghcr.io support using the GITHUB_TOKEN we should migrate
## over to use it instead as that should allow us to use the
## built-in caching mechanisms of docker/build-push-action@v2.
## However as things are now we use docker directly to make things
## work.
##

name: Build and check Erlang/OTP

on:
  push:
  pull_request:

permissions:
  packages: write
  contents: read

jobs:
  pack:
    name: Pack the Erlang/OTP tar.gz
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create initial pre-release tar 
        run: .github/scripts/init-pre-release.sh
      - name: Upload source tar archive
        uses: actions/upload-artifact@v2
        with:
          name: otp_git_archive
          path: otp_src.tar.gz

  test:
    name: Test Erlang/OTP
    runs-on: ubuntu-latest
    needs: pack
    steps:
      - uses: actions/checkout@v2
      - name: Download source archive
        uses: actions/download-artifact@v2
        with:
          name: otp_git_archive
      - uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: ghcr
        id: ghcr
        run: |
          GHCR=$(echo "ghcr.io/${{ github.repository }}" | tr 'A-Z' 'a-z')
          echo "::set-output name=ghcr::$GHCR"
      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          push: true
          pull: true
          cache-from: ${{ steps.ghcr.outputs.ghcr }}/base:ubuntu20.04
          platforms: linux/amd64
          tags: ${{ steps.ghcr.outputs.ghcr }}/base:ubuntu20.04
          file: .github/dockerfiles/Dockerfile.ubuntu20.04
      - name: Build otp image
        uses: docker/build-push-action@v2
        with:
          push: false
          pull: true
          no-cache: true
          load: true
          platforms: linux/amd64
          tags: otp
          build-args: |
            ARCHIVE=otp_src.tar.gz
            BASE=${{ steps.ghcr.outputs.ghcr }}/base:ubuntu20.04
          file: .github/dockerfiles/Dockerfile
          context: .
        ## Smoke build tests
      - name: Run smoke test
        run: docker run -i -v $PWD/scripts:/scripts otp sh -c "cd /tests && /scripts/run-smoke-tests"
        ## Check formatting of cpp code
        # - name: Check format
        #   run: docker run -v $PWD/scripts:/scripts otp "make format-check"
        ## Run dialyzer
        #  - name: Run dialyzer
        #    run: docker run -i -v $PWD/scripts:/scripts otp sh -c "/scripts/run-dialyzer"

  build:
    name: Build Erlang/OTP
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test

    strategy:
      fail-fast: false
      matrix:
        platform:
          - [ubuntu20.04, "linux/amd64,linux/arm64"]
          - [ubuntu18.04, "linux/amd64,linux/arm64"]
          - [ubuntu16.04, "linux/amd64,linux/arm64"]
          - [debian10   , "linux/amd64,linux/arm64"]
          - [debian9    , "linux/amd64,linux/arm64"]
          - [centos8    , "linux/amd64,linux/arm64"]
          - [centos7    , "linux/amd64,linux/arm64"]
          - [centos6    , "linux/amd64"]
          - [opensuse   , "linux/amd64,linux/arm64"]
          - [raspbian10 , "linux/arm64"]
          - [alpine3.14 , "linux/amd64,linux/arm64,linux/arm/v7"]

    steps:
      - uses: actions/checkout@v2
      - name: Download source archive
        uses: actions/download-artifact@v2
        with:
          name: otp_git_archive
      - uses: docker/setup-buildx-action@v1
      - uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Set env
        id: env
        run: |
          GHCR=$(echo "ghcr.io/${{ github.repository }}" | tr 'A-Z' 'a-z')
          TAG=${GITHUB_REF#refs/tags/}
          VSN=${TAG#OTP-}
          IMAGE=$GHCR:$VSN-${{ matrix.platform[0] }}

          echo "::set-output name=ghcr::$GHCR"
          echo "::set-output name=image::$IMAGE"
      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          push: true
          pull: true
          cache-from: ${{ steps.env.outputs.ghcr }}/base:${{ matrix.platform[0] }}
          platforms: ${{ matrix.platform[1] }}
          tags: ${{ steps.env.outputs.ghcr }}/base:${{ matrix.platform[0] }}
          file: .github/dockerfiles/Dockerfile.${{ matrix.platform[0] }}
      - name: Build otp image
        uses: docker/build-push-action@v2
        with:
          push: true
          pull: true
          no-cache: true
          platforms: ${{ matrix.platform[1] }}
          tags: ${{ steps.env.outputs.image }}
          build-args: |
            ARCHIVE=otp_src.tar.gz
            BASE=${{ steps.env.outputs.ghcr }}/base:${{ matrix.platform[0] }}
          file: .github/dockerfiles/Dockerfile
          context: .
