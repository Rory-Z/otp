ARG BASE=debian:10
FROM $BASE
## Need to have a second arg here as the first does not expose the $BASE in the script below
ARG BASE=debian

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    perl \
    gcc \
    g++ \
    wget \
    make \
    ca-certificates \
    libbluetooth-dev \
    tk-dev \
    uuid-dev \
    && rm -rf /var/lib/apt/lists/*

ENV LANG=C.UTF-8

# ENV OPENSSL_ROOT_DIR=/usr/local/openssl
# ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib:/usr/lib:/usr/local/lib:$OPENSSL_ROOT_DIR/lib
# 
# RUN set -ex; \
#     \
#     wget --no-verbose --no-check-certificate -O openssl.tar.gz https://www.openssl.org/source/openssl-1.1.1k.tar.gz \
#     && mkdir -p /usr/src/openssl \
#     && tar -zxvf openssl.tar.gz -C /usr/src/openssl --strip-components=1 \
#     && rm -rf openssl.tar.gz \
#     && cd /usr/src/openssl \
#     && ./Configure || true \
#     && ./config --prefix=$OPENSSL_ROOT_DIR shared zlib \
#     && make -j "$(nproc)" \
#     && make install \
#     && rm -rf /usr/bin/openssl /usr/include/openssl \
#     && ln -s $OPENSSL_ROOT_DIR/bin/openssl /usr/bin/openssl \
#     && ln -s $OPENSSL_ROOT_DIR/include/openssl /usr/include/openssl \
#     && echo "$OPENSSL_ROOT_DIR/lib" >> /etc/ld.so.conf \
#     && ldconfig \
#     && openssl version \
#     && rm -rf /usr/src/openssl

RUN apt-get update && apt-get install -y --no-install-recommends \
    openssl \
    libssl-dev \
    && openssl version

ARG PYTHON_VERSION=3.8.9

ENV PATH=/usr/local/bin:$PATH

RUN set -ex \
	\
	&& wget --no-verbose --no-check-certificate -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
    && ./configure \
        --build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-optimizations \
		--enable-option-checking=fatal \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	# && ./configure \
    #     --build="$gnuArch" \
	# 	--enable-loadable-sqlite-extensions \
	# 	--enable-optimizations \
	# 	--enable-option-checking=fatal \
	# 	--enable-shared \
	# 	--with-system-expat \
	# 	--with-system-ffi \
	# 	--without-ensurepip \
    #     --with-openssl=$OPENSSL_ROOT_DIR \
	&& make -j "$(nproc)" \
	&& make install \
	&& rm -rf /usr/src/python \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
			-o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name '*.a' \) \) \
		\) -exec rm -rf '{}' + \
	\
	&& ldconfig \
	\
	&& python3 --version

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
	&& ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s python3-config python-config

RUN set -ex; \
	\
    wget --no-verbose --no-check-certificate https://bootstrap.pypa.io/get-pip.py; \
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py

RUN pip install pytest

ENV CMAKE_VERSION=3.19.8
ENV PATH=/usr/local/cmake/bin:$PATH
RUN set -ex; \
    \
    wget --no-verbose --no-check-certificate  -O cmake.tar.gz "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-$(uname -m).tar.gz" \
    && mkdir -p /usr/local/cmake \
    && tar -zxvf cmake.tar.gz -C /usr/local/cmake --strip-components=1 \
    && rm -f cmake.tar.gz \
    && cmake --version

RUN set -ex \
    && runtimeDeps=' \
		libodbc1 \
		libssl1.1 \
		libsctp1 \
	' \
	&& buildDeps=' \
		autoconf \
		dpkg-dev \
		gcc \
		g++ \
		make \
		libncurses-dev \
		unixodbc-dev \
		libssl-dev \
		libsctp-dev \
	' \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends curl zip unzip git vim jq debhelper build-essential libncurses5-dev \
	&& apt-get install -y --no-install-recommends $runtimeDeps \
	&& apt-get install -y --no-install-recommends $buildDeps \
    && rm -rf /var/lib/apt/lists/*
